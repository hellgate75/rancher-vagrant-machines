# -*- mode: ruby -*-
# vi: set ft=ruby :

#require_relative 'vagrant_rancheros_guest_plugin.rb'
require_relative 'vagrant-rancheros-vbadditions-plugin.rb'

require_relative 'vagrant-local-shell-commands-plugin.rb'


# To enable rsync folder share change to false
RSYNC_FOLDER_DISABLED = false
SYNCED_FOLDER_DISABLED = true
VM_MEMORY = "3072"
VM_CPUS = "2"
VM_HOSTNAME = "rancher-sever"
VM_MAC_ADDRESS = "022999D56C04"
VM_NAME = "rancheros-server-0.9.0"
VM_IP_ADDRESS = "192.168.50.113"
NETWORK_SERVER_LIST="192.168.50.113,192.168.50.114,192.168.50.115,192.168.50.116"
#VM_DISK_SIZE_MB = "61440"
VM_DISK_SIZE_MB = "81920"
#VM_PORT_BINDING = [[8090, 8080],[8092, 8082]]
VM_PORT_BINDING = []
#LIST OF COUPLE IN-MACHINE -> EXPOSED  NUMERIC PORTS af follow:
# [[guest_port, host_port], ....]
#VM_DISK_DEFAULT_SIZE_MB = "61440"
VM_DISK_DEFAULT_SIZE_MB="81920"
VM_SYNCED_FOLDERS = []
#Array including three string of remote label and local to sync path and protocol (rsync, nfs, sshfs, etc..) as follow :
#[[local path, remote path, protocol], ....]
# In order to enable the sshfs protocol on the guest machine type 'touch .sshfs_enabled' in the vagrant machine folder
VM_DEFAULT_SYNCED_PROTOCOL="sshfs"

# To enable rsync folder share change to false
$rsync_folder_disabled = RSYNC_FOLDER_DISABLED or true
$vagrant_folder_disabled = SYNCED_FOLDER_DISABLED or true
$vm_mem = VM_MEMORY or "4096"
$vb_gui = false
$vm_cpus = VM_CPUS or "2"
$host_name = VM_HOSTNAME or "rancher-server"
$vm_mac = VM_MAC_ADDRESS or "022999D56C03"
$vm_name = VM_NAME or "rancheros-server-0.9.0"
$provider = "virtualbox"
$ip_address = VM_IP_ADDRESS or "192.168.50.112"
$network_address = NETWORK_SERVER_LIST or ""

$disk_capacity = VM_DISK_SIZE_MB or "40960"
$curent_disk_capacity = VM_DISK_DEFAULT_SIZE_MB or "40960"
$disk_base_name = "box-disk1"
$vm_binding = VM_PORT_BINDING or []
# This variable is in the format [ [guest1, host1], .... ] by content of integers
$vm_synced_folders = VM_SYNCED_FOLDERS or []
#Array including three string of remote label and local to sync path and protocol (rsync, nfs, sshfs, etc..) as follow :
#[[local path, remote path, protocol], ....]
# In order to enable the sshfs protocol on the guest machine type 'touch .sshfs_enabled' in the vagrant machine folder
$default_synced_folder_protocol = VM_DEFAULT_SYNCED_PROTOCOL or "rsync"

# All Vagrant configuration is done below. The "2" in Vagrant.configure
# configures the configuration version (we support older styles for
# backwards compatibility). Please don't change it unless you know what
# you're doing.
Vagrant.configure("2") do |config|
  config.vm.box   = "rancheros-v0.9.0-single"
  config.vm.base_mac = $vm_mac
  config.ssh.insert_key = false
  config.ssh.username="rancher"
  config.vm.synced_folder ".", "/vagrant", disabled: $vagrant_folder_disabled
  config.vm.boot_timeout=600
  config.vm.box_download_insecure=true
  config.ssh.private_key_path = ["~/.ssh/id_rsa", "~/.vagrant.d/insecure_private_key"]

  config.vm.define $vm_name do |node|
    node.vm.provider $provider do |vb|
      vb.memory = $vm_mem
      vb.cpus = $vm_cpus
      vb.gui = $vb_gui
      vb.name = $vm_name
    end

    # Before we check about the current disk capacity the is different from the default one
    if ($disk_capacity != $curent_disk_capacity) then
      config.vm.provider $provider do |v|
        # 0. We define the current and two temporary disks
        base_path = file_to_disk = File.realpath( "/" + ENV['HOME'] + "/VirtualBox VMs/" ).to_s
        vmdk_path_skel = base_path + "/" + $vm_name + "/" + $disk_base_name
        vmdk_path = vmdk_path_skel + ".vmdk"
        if File.exist?(file_to_disk) then
          tmp1 = vmdk_path_skel + ".cloned.vdi"

          # Then on the pre-boot time (machine is down) we are going to :
          # 1. clone the vmdk in vdi (actually we cannot resize a vmdk with VBox)
          # 2. resize the cloned vdi
          # 3. clone the vdi in a temporary new resized vmdk
          if (File.exist?(tmp1) == true) then
            v.customize "pre-boot", ["closemedium", "disk", tmp1, "--delete"]
          end
          if (File.exist?(tmp1) == false) then
            v.customize "pre-boot", ["clonehd",  vmdk_path ,  tmp1, "--format", "VDI"]
            v.customize "pre-boot", ["modifyhd", tmp1, "--resize", $disk_capacity]
            v.customize "pre-boot", ["showmediuminfo", tmp1]
            v.customize "pre-boot", ["clonehd",  tmp1,  vmdk_path, "--existing"]
            v.customize "pre-boot", ["showmediuminfo", vmdk_path]
            # 4. we remove the original and the vdi disks and rename the
            #    temporary vmdk with the original disk name and the machine
            #    boot can proceed normally with a resized disk
            v.customize "pre-boot", ["closemedium", "disk", tmp1, "--delete"]
          end
        else
          raise "unable to locate file to increase capacity"
        end
      end
    end

    node.vm.network "private_network", ip: $ip_address, auto_config: false, :adapter => 2

    node.vm.hostname = $host_name

    config.vm.provision "shell", run: "always", inline: <<-SHELL

  if [ -z "$(which brctl)" ]; then
    echo "Installing required packages ..."
    sudo apt-get update > /dev/null 2>&1 && \
    sudo apt-get install -y binutils bridge-utils iputils-ping curl wget > /dev/null 2>&1  && \
    sudo apt-get -y autoremove > /dev/null 2>&1 && \
    sudo apt-get -y clean > /dev/null 2>&1 && \
    sudo rm -Rf /var/lib/apt/lists/*
  fi

  if [ -z "$(ifconfig -a | grep docker1)" ]; then
    echo "Cleaning eth1 address ..."
    IPADDRESS="$(ifconfig eth1 | grep 'inet '|awk 'BEGIN {FS=OFS= " "}{print $2}')"
    sudo ip addr del $IPADDRESS/24 dev eth1
    IPADDRESS="$(ifconfig eth1 | grep 'inet '|awk 'BEGIN {FS=OFS= " "}{print $2}')"
    if ! [ -z "$IPADDRESS" ]; then
      sudo ip addr del $IPADDRESS/24 dev eth1
    fi
    echo "eth1 : $(ifconfig eth1 | grep 'inet '|awk 'BEGIN {FS=OFS= " "}{print $2}')"
    IPADDRESS="#{$ip_address}"
    ifconfig -a
    echo "Creating docker1 bridged network"
    echo "Bridging docker1 on : $IPADDRESS"
    sudo docker network create \
              --driver bridge \
              --internal=false \
              --subnet=$IPADDRESS/24 \
              --gateway=$IPADDRESS \
              --opt "com.docker.network.bridge.name"="docker1" \
              shared_nw
    echo "Creating bridge ..."
    sudo brctl addif docker1 eth1
    echo "Configuring eth1 docker1 Networks in rancher ..."
    sudo ros config set rancher.network.interfaces.docker1.address #{$ip_address}
    sudo ros config set rancher.network.interfaces.docker1.bridge true
    sudo ros config set rancher.network.interfaces.eth1.address #{$ip_address}
    echo "Restarting Rancher Network ..."
    sudo system-docker restart network
    echo "Status docker1 network ip : $(ifconfig docker1 | grep 'inet '|awk 'BEGIN {FS=OFS= " "}{print $2}')"
  else
    echo "Restarting Rancher Network ..."
    sudo system-docker restart network
    echo "Status docker1 network ip : $(ifconfig docker1 | grep 'inet '|awk 'BEGIN {FS=OFS= " "}{print $2}')"
    IPADDRESS="#{$ip_address}"
  fi

  if ! [ -z "$(sudo ros config set rancher.network.interfaces.docker0.address)" ]; then
    echo "Reporting subnetworks to docker ..."
    sudo ros config set rancher.network.interfaces.docker0.address $(ifconfig docker0 | grep 'inet '|awk 'BEGIN {FS=OFS= " "}{print $2}')/16
    sudo ros config set rancher.network.interfaces.docker0.bridge true
    sudo ros config set rancher.network.interfaces.docker0.post_up ['route add -net 10.42.0.0 netmask 255.255.0.0 dev docker0']
    echo "Restarting RancherOS network"
    sudo system-docker restart network
    echo "Status docker0 network ip : $(ifconfig docker0 | grep 'inet '|awk 'BEGIN {FS=OFS= " "}{print $2}')"
  else
    echo "Status docker0 network ip : $(ifconfig docker0 | grep 'inet '|awk 'BEGIN {FS=OFS= " "}{print $2}')"
  fi

  if [ -z "$(sudo ros engine list | grep docker-17.03.0-ce | grep current)" ]; then
    echo "Set up docker 17.03 CE"
    sudo ros engine switch docker-17.03.0-ce > /dev/null 2>&1
    sudo ros config set rancher.docker.bridge docker0
    sudo ros config set rancher.docker.storage_driver overlay
    # sudo ros config set rancher.docker.extra_args ["--fixed-cidr=$IPADDRESS2/16","--ip-masq=true"]
    sudo ros config set rancher.docker.hosts ["127.0.0.1","$IPADDRESS","$IPADDRESS2","$(ifconfig eth0 | grep 'inet '|awk 'BEGIN {FS=OFS= " "}{print $2}')"]
    sudo system-docker restart docker
    sleep 10
    echo "Docker binaries : $(which docker)"
    echo "Docker version : "
    docker version
    echo "Docker info: "
    docker info
    echo "Docker logs : "
    sudo system-docker logs docker
  fi

  DEFAULT_GATEWAY="$(route|grep default|grep eth0|awk '{FS=OFS=" "}{print $2}'| uniq)"
  ADDRESSES="#{$network_address}"
  echo "DEFAULT GATEWAY = $DEFAULT_GATEWAY"
  echo "DOMAIN ADDRESSES = $ADDRESSES"
  ROUTES="$(sudo ros config get rancher.network.interfaces.eth0.post_up | sed -e ':a' -e 'N' -e '$!ba' -e 's/\\n/\|/g'  | sed 's/- //g')"
  if [ "$ROUTES" =~ '|'$ ]; then
    ROUTES="$(echo $ROUTES | sed s'/.$//')"
  fi
  IFS=',' ; for i in $ADDRESSES ; do
    if ! [ -z "$i" ] && ! [ -z "$DEFAULT_GATEWAY" ] && [ -z "$(echo $ROUTES|grep "$i")"]; then
      echo "Set up routing to $i on gateway $DEFAULT_GATEWAY for device eth0"
      ROUTES="$ROUTES|ip route add $i via $DEFAULT_GATEWAY dev eth0"
    fi
  done
  ROUTES_COLLECTION=""
  IFS='|' ; for i in $ROUTES ; do
    if ! [ -z "$i" ]; then
      if ! [ -z "$ROUTES_COLLECTION" ]; then
        ROUTES_COLLECTION="$ROUTES_COLLECTION,\'$i\'"
      else
        ROUTES_COLLECTION="\'$i\'"
      fi
    fi
  done
  echo "Applying route for eth0 : $ROUTES_COLLECTION"
  /bin/bash -c "sudo ros config set rancher.network.interfaces.eth0.post_up [$ROUTES_COLLECTION]"
  sudo system-docker restart network

if ! [ -e /usr/bin/clear-docker ]; then
  echo '#!/bin/bash' > /home/rancher/clear-docker
  echo 'if ! [[ -z "$(docker ps -a)" ]]; then' >> /home/rancher/clear-docker
  echo '  echo "Cleaning containers ..."' >> /home/rancher/clear-docker
  echo '  docker ps -a -q | xargs docker rm -f' >> /home/rancher/clear-docker
  echo 'fi' >> /home/rancher/clear-docker
  echo 'if ! [[ -z "$(docker volume ls)" ]]; then' >> /home/rancher/clear-docker
  echo '  echo "Cleaning volumes ..."' >> /home/rancher/clear-docker
  echo '  docker volume ls -q | xargs docker volume rm' >> /home/rancher/clear-docker
  echo 'fi' >> /home/rancher/clear-docker
  sudo chmod 777 /home/rancher/clear-docker
  sudo mv /home/rancher/clear-docker /usr/bin/clear-docker
fi

if [ -z "$(docker ps -a | grep rancher-server)" ]; then
  echo "Define Rancher Server Setup Script ..."
  sudo rm -f /home/rancher/create-rancher-server.sh
  echo "#!/bin/bash" > /home/rancher/create-rancher-server.sh
  echo "sleep 20" >> /home/rancher/create-rancher-server.sh
  echo 'if ! [[ -z \"$(docker ps -a | grep rancher-server)\" ]]; then' >> /home/rancher/create-rancher-server.sh
  echo "   docker ps -a -q | xargs docker rm -f && docker volume ls -q | xargs docker volume rm" >> /home/rancher/create-rancher-server.sh
  echo "   sudo rm -Rf //home/rancher/rancher-server" >> /home/rancher/create-rancher-server.sh
  echo "fi" >> /home/rancher/create-rancher-server.sh
  echo "sudo mkdir -p /home/rancher/rancher-server/db-data" >> /home/rancher/create-rancher-server.sh
  echo "sudo docker run -d --hostname localhost --name rancher-server --privileged --restart=unless-stopped -v /home/rancher/rancher-server/db-data:/var/lib/mysql -p 8080:8080 rancher/server > /home/rancher/rancher-server.log 2>&1" >> /home/rancher/create-rancher-server.sh
  echo "docker logs -f rancher-server >> /home/rancher/rancher-server.log 2>&1 & " >> /home/rancher/create-rancher-server.sh
  echo "sudo rm -f /home/rancher/create-rancher-server.sh" >> /home/rancher/create-rancher-server.sh
  sudo chmod 777 /home/rancher/create-rancher-server.sh
fi

if [ -z "$(docker ps -a | grep bind)" ]; then
  echo "Define DNS ..."
  mkdir -p /home/rancher/bind/etc
  mkdir -p /home/rancher/bind/zones
  mkdir -p /home/rancher/bind/webmin
  docker run -d \
    -p 53:53 -p 53:53/udp \
    --restart unless-stopped \
    --net=host \
    --privileged \
    -p 10000:10000 \
    -v /home/rancher/bind/etc:/etc/bind \
    -v /home/rancher/bind/zones:/var/lib/bind \
    -v /home/rancher/bind/webmin:/etc/webmin \
    -e PASS=newpass \
    -e "NET=172.17.0.0\;172.18.0.0\;192.168.1.0\;192.168.50.0\;10.1.2.0\;10.2.2.0\;10.3.2.0" \
    --name bind --hostname bind \
    cosmicq/docker-bind > /dev/null 2>&1
fi

echo "Removing eth0 address and restarting network"
sudo rm -f /home/rancher/restart-net.sh
echo '#!/bin/bash' > /home/rancher/restart-net.sh
echo "sudo ip addr del \$(ifconfig eth0 | grep 'inet '|awk 'BEGIN {FS=OFS= \" \"}{print \$2}')/24 dev eth0 > /home/rancher/net.restart.log" >> /home/rancher/restart-net.sh
echo 'if [[ -z "$(sudo brctl show  | grep docker1 | grep eth1)" ]]; then' >> /home/rancher/restart-net.sh
echo "   sudo brctl addif docker1 eth1" >> /home/rancher/restart-net.sh
echo "fi" >> /home/rancher/restart-net.sh
echo 'sudo system-docker restart network >> /home/rancher/net.restart.log' >> /home/rancher/restart-net.sh
echo "sudo rm -f /home/rancher/restart-net.sh" >> /home/rancher/restart-net.sh
sudo chmod 777 /home/rancher/restart-net.sh
if [ -e /home/rancher/create-rancher-server.sh ]; then
  echo "Scheduing Rancher Server start-up job ..."
  /bin/bash -c 'cd /home/rancher && nohup /home/rancher/create-rancher-server.sh &' &
fi
echo "Scheduing network restart job ..."
/bin/bash -c 'cd /home/rancher && /home/rancher/restart-net.sh' &
echo "Login the machine with : vagrant ssh"
echo "Login the machine with : ssh rancher@$IPADDRESS"

SHELL

    unless Vagrant.has_plugin?('vagrant-hostmanager')
      puts 'vagrant-hostmanager is not installed: no host management provided'
    else
      config.hostmanager.enabled = true
      config.hostmanager.manage_host = true
      config.hostmanager.ignore_private_ip = false
      config.hostmanager.include_offline = true
      config.hostmanager.aliases = ["#{$host_name}.localdomain", "#{$host_name}"]
    end

    for single_binding in $vm_binding
      config.vm.network :forwarded_port, guest: single_binding[0], host: single_binding[1]
    end

    # Disabling compression because OS X has an ancient version of rsync installed.
    # Add -z or remove rsync__args below if you have a newer version of rsync on your machine.
    if $default_synced_folder_protocol == "sshfs" then
      node.vm.synced_folder ".", "/opt/vagrant", type: $default_synced_folder_protocol,
          sshfs_opts_append: "-o cache=no",
          disabled: $rsync_folder_disabled
    elsif $default_synced_folder_protocol == "rsync" then
      node.vm.synced_folder ".", "/opt/vagrant", type: $default_synced_folder_protocol,
          rsync__exclude: ".git/", rsync__args: ["--verbose", "--archive", "--delete", "--copy-links"],
          disabled: $rsync_folder_disabled
    end

    if ($rsync_folder_disabled == false) then
      for syncfolder in $vm_synced_folders
        if $default_synced_folder_protocol == "sshfs" then
          node.vm.synced_folder syncfolder[0], "/opt/" + syncfolder[1], type: syncfolder[3],
              sshfs_opts_append: "-o cache=no",
              disabled: $rsync_folder_disabled
        elsif $default_synced_folder_protocol == "rsync" then
          node.vm.synced_folder syncfolder[0], "/opt/" + syncfolder[1], type: syncfolder[3],
              rsync__exclude: ".git/", rsync__args: ["--verbose", "--archive", "--delete", "--copy-links"],
              disabled: $rsync_folder_disabled
        end
      end
    end

#    config.vm.provision "reboot-vagrant", type: "local_shell", command: "./restart-vagrant.sh &"

    # do NOT download the iso file from a webserver
    #config.vbguest.no_remote = true
    if Vagrant.has_plugin?("vagrant-vbguest") then
      config.vbguest.auto_update = false
    end
    config.vm.guest = :linux
  end
end
